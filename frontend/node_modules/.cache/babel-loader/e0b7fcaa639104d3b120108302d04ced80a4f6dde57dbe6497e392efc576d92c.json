{"ast":null,"code":"var _jsxFileName = \"/Users/ryantay/Desktop/Merctrans/pdf-reader/frontend/src/components/MessageFormatter.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst styles = `\n.message-content {\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\n.message-content h1, .message-content h2, .message-content h3,\n.message-content h4, .message-content h5, .message-content h6 {\n  margin-top: 1.5em;\n  margin-bottom: 0.5em;\n  font-weight: 600;\n}\n\n.message-content ul, .message-content ol {\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n}\n\n.message-content li {\n  margin-bottom: 0.25em;\n}\n\n.message-content code {\n  background-color: #f0f0f0;\n  padding: 0.2em 0.4em;\n  border-radius: 3px;\n  font-family: monospace;\n}\n`;\nconst MessageFormatter = ({\n  content,\n  context,\n  selectedDocs,\n  openPdfPage\n}) => {\n  const truncateContext = (text, maxLength = 200) => {\n    if (!text) return \"\";\n    if (text.length <= maxLength) return text;\n    const truncated = text.substring(0, maxLength);\n    const lastPeriod = truncated.lastIndexOf(\".\");\n    const lastQuestion = truncated.lastIndexOf(\"?\");\n    const lastExclamation = truncated.lastIndexOf(\"!\");\n    const lastSentenceEnd = Math.max(lastPeriod, lastQuestion, lastExclamation);\n    if (lastSentenceEnd > 0) {\n      return text.substring(0, lastSentenceEnd + 1) + \"...\";\n    }\n    const lastSpace = truncated.lastIndexOf(\" \");\n    return text.substring(0, lastSpace) + \"...\";\n  };\n  const formatText = text => {\n    if (!text) return '';\n\n    // Remove trailing asterisks that aren't bullet points\n    text = text.replace(/\\*+$/, '');\n    let formattedText = text\n    // Bold text (both ** and __ syntax)\n    .replace(/(\\*\\*|__)(.*?)\\1/g, '<strong>$2</strong>')\n    // Italic text (both * and _ syntax)\n    .replace(/(\\*|_)(.*?)\\1/g, '<em>$2</em>')\n    // Headers\n    .replace(/^(#{1,6})\\s+(.+)$/gm, (match, hashes, content) => {\n      const level = hashes.length;\n      return `<h${level} class=\"text-${getHeaderSize(level)} font-bold my-2\">${content}</h${level}>`;\n    })\n    // Number formatting\n    .replace(/(\\$?\\d+(?:,\\d{3})*(?:\\.\\d+)?(?:\\s*(?:million|billion|trillion))?)/g, '<span class=\"font-mono\">$1</span>');\n    return formattedText;\n  };\n  const getHeaderSize = level => {\n    const sizes = {\n      1: 'xl',\n      2: 'lg',\n      3: 'base',\n      4: 'sm',\n      5: 'xs',\n      6: 'xs'\n    };\n    return sizes[level] || 'base';\n  };\n  const formatSection = section => {\n    // Split section into lines to handle mixed content\n    const lines = section.split('\\n');\n    const formattedLines = [];\n    let currentList = [];\n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n\n      // Check if line starts with an asterisk for bullet point\n      if (trimmedLine.startsWith('*')) {\n        // Remove the asterisk and any immediate whitespace\n        const bulletContent = trimmedLine.replace(/^\\*\\s*/, '').trim();\n        currentList.push(bulletContent);\n      } else {\n        // If we have accumulated list items, add the list first\n        if (currentList.length > 0) {\n          formattedLines.push(/*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"list-disc pl-6 space-y-2\",\n            children: currentList.map((item, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"mb-2\",\n              dangerouslySetInnerHTML: {\n                __html: formatText(item)\n              }\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 19\n            }, this))\n          }, `list-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this));\n          currentList = [];\n        }\n\n        // Handle section titles with **Title:** format\n        const sectionTitleMatch = trimmedLine.match(/^\\*\\*(.*?)\\*\\*:/);\n        if (sectionTitleMatch) {\n          const [fullMatch, title] = sectionTitleMatch;\n          const content = trimmedLine.slice(fullMatch.length).trim();\n          formattedLines.push(/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"font-bold mb-2\",\n              children: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              dangerouslySetInnerHTML: {\n                __html: formatText(content)\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 17\n            }, this)]\n          }, `section-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this));\n        } else if (trimmedLine) {\n          // Regular paragraph\n          formattedLines.push(/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-4\",\n            dangerouslySetInnerHTML: {\n              __html: formatText(trimmedLine)\n            }\n          }, `para-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this));\n        }\n      }\n    });\n\n    // Add any remaining list items\n    if (currentList.length > 0) {\n      formattedLines.push(/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc pl-6 space-y-2\",\n        children: currentList.map((item, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"mb-2\",\n          dangerouslySetInnerHTML: {\n            __html: formatText(item)\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this))\n      }, \"final-list\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: formattedLines\n    }, void 0, false);\n  };\n  const sections = content.split('\\n\\n').filter(section => section.trim());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-content\",\n    children: [sections.map((section, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: formatSection(section)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }, this)), context && context.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"context-info mt-6 bg-gray-50 p-4 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-sm font-semibold text-gray-600 mb-3\",\n        children: \"Relevant Source Excerpts:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-3\",\n        children: context.map((ctx, idx) => {\n          const relatedDoc = selectedDocs.find(d => d.id === ctx.documentId);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white p-3 rounded-md shadow-sm\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-start gap-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-gray-500 mb-1\",\n                  children: [\"From: \", (relatedDoc === null || relatedDoc === void 0 ? void 0 : relatedDoc.filename) || `Document ${ctx.documentId}`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 183,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm\",\n                  children: truncateContext(ctx.content)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-3 py-1 text-sm text-blue-600 hover:bg-blue-50 rounded\",\n                onClick: () => openPdfPage(relatedDoc === null || relatedDoc === void 0 ? void 0 : relatedDoc.file_url, ctx.page_number),\n                children: [\"Page \", ctx.page_number]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 21\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 7\n  }, this);\n};\n_c = MessageFormatter;\nexport default MessageFormatter;\nvar _c;\n$RefreshReg$(_c, \"MessageFormatter\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","styles","MessageFormatter","content","context","selectedDocs","openPdfPage","truncateContext","text","maxLength","length","truncated","substring","lastPeriod","lastIndexOf","lastQuestion","lastExclamation","lastSentenceEnd","Math","max","lastSpace","formatText","replace","formattedText","match","hashes","level","getHeaderSize","sizes","formatSection","section","lines","split","formattedLines","currentList","forEach","line","index","trimmedLine","trim","startsWith","bulletContent","push","className","children","map","item","idx","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","sectionTitleMatch","fullMatch","title","slice","sections","filter","ctx","relatedDoc","find","d","id","documentId","filename","onClick","file_url","page_number","_c","$RefreshReg$"],"sources":["/Users/ryantay/Desktop/Merctrans/pdf-reader/frontend/src/components/MessageFormatter.js"],"sourcesContent":["import React from 'react';\n\nconst styles = `\n.message-content {\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\n.message-content h1, .message-content h2, .message-content h3,\n.message-content h4, .message-content h5, .message-content h6 {\n  margin-top: 1.5em;\n  margin-bottom: 0.5em;\n  font-weight: 600;\n}\n\n.message-content ul, .message-content ol {\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n}\n\n.message-content li {\n  margin-bottom: 0.25em;\n}\n\n.message-content code {\n  background-color: #f0f0f0;\n  padding: 0.2em 0.4em;\n  border-radius: 3px;\n  font-family: monospace;\n}\n`;\n\nconst MessageFormatter = ({ content, context, selectedDocs, openPdfPage }) => {\n    const truncateContext = (text, maxLength = 200) => {\n      if (!text) return \"\";\n      if (text.length <= maxLength) return text;\n      \n      const truncated = text.substring(0, maxLength);\n      const lastPeriod = truncated.lastIndexOf(\".\");\n      const lastQuestion = truncated.lastIndexOf(\"?\");\n      const lastExclamation = truncated.lastIndexOf(\"!\");\n      \n      const lastSentenceEnd = Math.max(lastPeriod, lastQuestion, lastExclamation);\n      \n      if (lastSentenceEnd > 0) {\n        return text.substring(0, lastSentenceEnd + 1) + \"...\";\n      }\n      \n      const lastSpace = truncated.lastIndexOf(\" \");\n      return text.substring(0, lastSpace) + \"...\";\n    };\n\n    const formatText = (text) => {\n      if (!text) return '';\n      \n      // Remove trailing asterisks that aren't bullet points\n      text = text.replace(/\\*+$/, '');\n      \n      let formattedText = text\n        // Bold text (both ** and __ syntax)\n        .replace(/(\\*\\*|__)(.*?)\\1/g, '<strong>$2</strong>')\n        // Italic text (both * and _ syntax)\n        .replace(/(\\*|_)(.*?)\\1/g, '<em>$2</em>')\n        // Headers\n        .replace(/^(#{1,6})\\s+(.+)$/gm, (match, hashes, content) => {\n          const level = hashes.length;\n          return `<h${level} class=\"text-${getHeaderSize(level)} font-bold my-2\">${content}</h${level}>`;\n        })\n        // Number formatting\n        .replace(/(\\$?\\d+(?:,\\d{3})*(?:\\.\\d+)?(?:\\s*(?:million|billion|trillion))?)/g, \n          '<span class=\"font-mono\">$1</span>');\n  \n      return formattedText;\n    };\n  \n    const getHeaderSize = (level) => {\n      const sizes = {\n        1: 'xl',\n        2: 'lg',\n        3: 'base',\n        4: 'sm',\n        5: 'xs',\n        6: 'xs'\n      };\n      return sizes[level] || 'base';\n    };\n\n    const formatSection = (section) => {\n      // Split section into lines to handle mixed content\n      const lines = section.split('\\n');\n      const formattedLines = [];\n      let currentList = [];\n      \n      lines.forEach((line, index) => {\n        const trimmedLine = line.trim();\n        \n        // Check if line starts with an asterisk for bullet point\n        if (trimmedLine.startsWith('*')) {\n          // Remove the asterisk and any immediate whitespace\n          const bulletContent = trimmedLine.replace(/^\\*\\s*/, '').trim();\n          currentList.push(bulletContent);\n        } else {\n          // If we have accumulated list items, add the list first\n          if (currentList.length > 0) {\n            formattedLines.push(\n              <ul key={`list-${index}`} className=\"list-disc pl-6 space-y-2\">\n                {currentList.map((item, idx) => (\n                  <li \n                    key={idx} \n                    className=\"mb-2\"\n                    dangerouslySetInnerHTML={{ __html: formatText(item) }}\n                  />\n                ))}\n              </ul>\n            );\n            currentList = [];\n          }\n          \n          // Handle section titles with **Title:** format\n          const sectionTitleMatch = trimmedLine.match(/^\\*\\*(.*?)\\*\\*:/);\n          if (sectionTitleMatch) {\n            const [fullMatch, title] = sectionTitleMatch;\n            const content = trimmedLine.slice(fullMatch.length).trim();\n            formattedLines.push(\n              <div key={`section-${index}`} className=\"mb-4\">\n                <h3 className=\"font-bold mb-2\">{title}</h3>\n                <div dangerouslySetInnerHTML={{ __html: formatText(content) }} />\n              </div>\n            );\n          } else if (trimmedLine) {\n            // Regular paragraph\n            formattedLines.push(\n              <p \n                key={`para-${index}`}\n                className=\"mb-4\"\n                dangerouslySetInnerHTML={{ __html: formatText(trimmedLine) }}\n              />\n            );\n          }\n        }\n      });\n      \n      // Add any remaining list items\n      if (currentList.length > 0) {\n        formattedLines.push(\n          <ul key=\"final-list\" className=\"list-disc pl-6 space-y-2\">\n            {currentList.map((item, idx) => (\n              <li \n                key={idx} \n                className=\"mb-2\"\n                dangerouslySetInnerHTML={{ __html: formatText(item) }}\n              />\n            ))}\n          </ul>\n        );\n      }\n      \n      return <>{formattedLines}</>;\n    };\n  \n    const sections = content\n      .split('\\n\\n')\n      .filter(section => section.trim());\n  \n    return (\n      <div className=\"message-content\">\n        {sections.map((section, idx) => (\n          <div key={idx} className=\"mb-4\">\n            {formatSection(section)}\n          </div>\n        ))}\n        \n        {context && context.length > 0 && (\n          <div className=\"context-info mt-6 bg-gray-50 p-4 rounded-lg\">\n            <h4 className=\"text-sm font-semibold text-gray-600 mb-3\">Relevant Source Excerpts:</h4>\n            <div className=\"space-y-3\">\n              {context.map((ctx, idx) => {\n                const relatedDoc = selectedDocs.find(d => d.id === ctx.documentId);\n                return (\n                  <div key={idx} className=\"bg-white p-3 rounded-md shadow-sm\">\n                    <div className=\"flex justify-between items-start gap-4\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-gray-500 mb-1\">\n                          From: {relatedDoc?.filename || `Document ${ctx.documentId}`}\n                        </p>\n                        <p className=\"text-sm\">{truncateContext(ctx.content)}</p>\n                      </div>\n                      <button\n                        className=\"px-3 py-1 text-sm text-blue-600 hover:bg-blue-50 rounded\"\n                        onClick={() => openPdfPage(relatedDoc?.file_url, ctx.page_number)}\n                      >\n                        Page {ctx.page_number}\n                      </button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n};\n\nexport default MessageFormatter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}