{"ast":null,"code":"var _jsxFileName = \"/Users/ryantay/Desktop/Merctrans/pdf-reader/frontend/src/components/MessageFormatter.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MessageFormatter = ({\n  content,\n  context,\n  selectedDocs,\n  openPdfPage\n}) => {\n  const truncateContext = (text, maxLength = 200) => {\n    if (!text) return \"\";\n    if (text.length <= maxLength) return text;\n    const truncated = text.substring(0, maxLength);\n    const lastPeriod = truncated.lastIndexOf(\".\");\n    const lastQuestion = truncated.lastIndexOf(\"?\");\n    const lastExclamation = truncated.lastIndexOf(\"!\");\n    const lastSentenceEnd = Math.max(lastPeriod, lastQuestion, lastExclamation);\n    if (lastSentenceEnd > 0) {\n      return text.substring(0, lastSentenceEnd + 1) + \"...\";\n    }\n    const lastSpace = truncated.lastIndexOf(\" \");\n    return text.substring(0, lastSpace) + \"...\";\n  };\n  const formatText = text => {\n    if (!text) return '';\n    let formattedText = text\n    // Remove the leading *** for bullet points if present\n    .replace(/^(\\*{3})/g, '')\n    // Bold text (both ** and __ syntax)\n    .replace(/(\\*\\*|__)(.*?)\\1/g, '<strong>$2</strong>')\n    // Italic text (both * and _ syntax)\n    .replace(/(\\*|_)(.*?)\\1/g, '<em>$2</em>')\n    // Headers\n    .replace(/^(#{1,6})\\s+(.+)$/gm, (match, hashes, content) => {\n      const level = hashes.length;\n      return `<h${level} class=\"text-${getHeaderSize(level)} font-bold my-2\">${content}</h${level}>`;\n    })\n    // Number formatting\n    .replace(/(\\$?\\d+(?:,\\d{3})*(?:\\.\\d+)?(?:\\s*(?:million|billion|trillion))?)/g, '<span class=\"font-mono\">$1</span>');\n    return formattedText;\n  };\n  const getHeaderSize = level => {\n    const sizes = {\n      1: 'xl',\n      2: 'lg',\n      3: 'base',\n      4: 'sm',\n      5: 'xs',\n      6: 'xs'\n    };\n    return sizes[level] || 'base';\n  };\n  const formatSection = section => {\n    // Split section into lines to handle mixed content\n    const lines = section.split('\\n');\n    const formattedLines = [];\n    let currentList = [];\n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n\n      // Check for three asterisks at start (bullet point with bold)\n      if (trimmedLine.startsWith('***')) {\n        const bulletContent = trimmedLine.substring(3).trim();\n        currentList.push(bulletContent);\n      }\n      // Check for two asterisks (bold text, not bullet point)\n      else if (trimmedLine.startsWith('**')) {\n        // If we have accumulated list items, add the list first\n        if (currentList.length > 0) {\n          formattedLines.push(/*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"list-disc pl-6 space-y-2\",\n            children: currentList.map((item, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"mb-2\",\n              dangerouslySetInnerHTML: {\n                __html: formatText(item)\n              }\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, this))\n          }, `list-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 11\n          }, this));\n          currentList = [];\n        }\n\n        // Handle as regular paragraph with bold text\n        formattedLines.push(/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-4\",\n          dangerouslySetInnerHTML: {\n            __html: formatText(trimmedLine)\n          }\n        }, `para-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this));\n      }\n      // Handle normal text\n      else {\n        // If we have accumulated list items, add the list first\n        if (currentList.length > 0) {\n          formattedLines.push(/*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"list-disc pl-6 space-y-2\",\n            children: currentList.map((item, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"mb-2\",\n              dangerouslySetInnerHTML: {\n                __html: formatText(item)\n              }\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this))\n          }, `list-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 11\n          }, this));\n          currentList = [];\n        }\n        if (trimmedLine) {\n          formattedLines.push(/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"mb-4\",\n            dangerouslySetInnerHTML: {\n              __html: formatText(trimmedLine)\n            }\n          }, `para-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 11\n          }, this));\n        }\n      }\n    });\n\n    // Add any remaining list items\n    if (currentList.length > 0) {\n      formattedLines.push(/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc pl-6 space-y-2\",\n        children: currentList.map((item, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"mb-2\",\n          dangerouslySetInnerHTML: {\n            __html: formatText(item)\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this))\n      }, \"final-list\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 7\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: formattedLines\n    }, void 0, false);\n  };\n  const sections = content.split('\\n\\n').filter(section => section.trim());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-content\",\n    children: [sections.map((section, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: formatSection(section)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }, this)), context && context.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"context-info mt-6 bg-gray-50 p-4 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-sm font-semibold text-gray-600 mb-3\",\n        children: \"Relevant Source Excerpts:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-3\",\n        children: context.map((ctx, idx) => {\n          const relatedDoc = selectedDocs.find(d => d.id === ctx.documentId);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white p-3 rounded-md shadow-sm\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-start gap-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-gray-500 mb-1\",\n                  children: [\"From: \", (relatedDoc === null || relatedDoc === void 0 ? void 0 : relatedDoc.filename) || `Document ${ctx.documentId}`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm\",\n                  children: truncateContext(ctx.content)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-3 py-1 text-sm text-blue-600 hover:bg-blue-50 rounded\",\n                onClick: () => openPdfPage(relatedDoc === null || relatedDoc === void 0 ? void 0 : relatedDoc.file_url, ctx.page_number),\n                children: [\"Page \", ctx.page_number]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 21\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 19\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 7\n  }, this);\n};\n_c = MessageFormatter;\nexport default MessageFormatter;\nvar _c;\n$RefreshReg$(_c, \"MessageFormatter\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","MessageFormatter","content","context","selectedDocs","openPdfPage","truncateContext","text","maxLength","length","truncated","substring","lastPeriod","lastIndexOf","lastQuestion","lastExclamation","lastSentenceEnd","Math","max","lastSpace","formatText","formattedText","replace","match","hashes","level","getHeaderSize","sizes","formatSection","section","lines","split","formattedLines","currentList","forEach","line","index","trimmedLine","trim","startsWith","bulletContent","push","className","children","map","item","idx","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","sections","filter","ctx","relatedDoc","find","d","id","documentId","filename","onClick","file_url","page_number","_c","$RefreshReg$"],"sources":["/Users/ryantay/Desktop/Merctrans/pdf-reader/frontend/src/components/MessageFormatter.js"],"sourcesContent":["import React from 'react';\n\n\nconst MessageFormatter = ({ content, context, selectedDocs, openPdfPage }) => {\n    const truncateContext = (text, maxLength = 200) => {\n      if (!text) return \"\";\n      if (text.length <= maxLength) return text;\n      \n      const truncated = text.substring(0, maxLength);\n      const lastPeriod = truncated.lastIndexOf(\".\");\n      const lastQuestion = truncated.lastIndexOf(\"?\");\n      const lastExclamation = truncated.lastIndexOf(\"!\");\n      \n      const lastSentenceEnd = Math.max(lastPeriod, lastQuestion, lastExclamation);\n      \n      if (lastSentenceEnd > 0) {\n        return text.substring(0, lastSentenceEnd + 1) + \"...\";\n      }\n      \n      const lastSpace = truncated.lastIndexOf(\" \");\n      return text.substring(0, lastSpace) + \"...\";\n    };\n\n    const formatText = (text) => {\n        if (!text) return '';\n        \n        let formattedText = text\n          // Remove the leading *** for bullet points if present\n          .replace(/^(\\*{3})/g, '')\n          // Bold text (both ** and __ syntax)\n          .replace(/(\\*\\*|__)(.*?)\\1/g, '<strong>$2</strong>')\n          // Italic text (both * and _ syntax)\n          .replace(/(\\*|_)(.*?)\\1/g, '<em>$2</em>')\n          // Headers\n          .replace(/^(#{1,6})\\s+(.+)$/gm, (match, hashes, content) => {\n            const level = hashes.length;\n            return `<h${level} class=\"text-${getHeaderSize(level)} font-bold my-2\">${content}</h${level}>`;\n          })\n          // Number formatting\n          .replace(/(\\$?\\d+(?:,\\d{3})*(?:\\.\\d+)?(?:\\s*(?:million|billion|trillion))?)/g, \n            '<span class=\"font-mono\">$1</span>');\n      \n        return formattedText;\n      };\n  \n    const getHeaderSize = (level) => {\n      const sizes = {\n        1: 'xl',\n        2: 'lg',\n        3: 'base',\n        4: 'sm',\n        5: 'xs',\n        6: 'xs'\n      };\n      return sizes[level] || 'base';\n    };\n\n    const formatSection = (section) => {\n  // Split section into lines to handle mixed content\n  const lines = section.split('\\n');\n  const formattedLines = [];\n  let currentList = [];\n  \n  lines.forEach((line, index) => {\n    const trimmedLine = line.trim();\n    \n    // Check for three asterisks at start (bullet point with bold)\n    if (trimmedLine.startsWith('***')) {\n      const bulletContent = trimmedLine.substring(3).trim();\n      currentList.push(bulletContent);\n    } \n    // Check for two asterisks (bold text, not bullet point)\n    else if (trimmedLine.startsWith('**')) {\n      // If we have accumulated list items, add the list first\n      if (currentList.length > 0) {\n        formattedLines.push(\n          <ul key={`list-${index}`} className=\"list-disc pl-6 space-y-2\">\n            {currentList.map((item, idx) => (\n              <li \n                key={idx} \n                className=\"mb-2\"\n                dangerouslySetInnerHTML={{ __html: formatText(item) }}\n              />\n            ))}\n          </ul>\n        );\n        currentList = [];\n      }\n      \n      // Handle as regular paragraph with bold text\n      formattedLines.push(\n        <p \n          key={`para-${index}`}\n          className=\"mb-4\"\n          dangerouslySetInnerHTML={{ __html: formatText(trimmedLine) }}\n        />\n      );\n    }\n    // Handle normal text\n    else {\n      // If we have accumulated list items, add the list first\n      if (currentList.length > 0) {\n        formattedLines.push(\n          <ul key={`list-${index}`} className=\"list-disc pl-6 space-y-2\">\n            {currentList.map((item, idx) => (\n              <li \n                key={idx} \n                className=\"mb-2\"\n                dangerouslySetInnerHTML={{ __html: formatText(item) }}\n              />\n            ))}\n          </ul>\n        );\n        currentList = [];\n      }\n      \n      if (trimmedLine) {\n        formattedLines.push(\n          <p \n            key={`para-${index}`}\n            className=\"mb-4\"\n            dangerouslySetInnerHTML={{ __html: formatText(trimmedLine) }}\n          />\n        );\n      }\n    }\n  });\n  \n  // Add any remaining list items\n  if (currentList.length > 0) {\n    formattedLines.push(\n      <ul key=\"final-list\" className=\"list-disc pl-6 space-y-2\">\n        {currentList.map((item, idx) => (\n          <li \n            key={idx} \n            className=\"mb-2\"\n            dangerouslySetInnerHTML={{ __html: formatText(item) }}\n          />\n        ))}\n      </ul>\n    );\n  }\n  \n  return <>{formattedLines}</>;\n};\n  \n    const sections = content\n      .split('\\n\\n')\n      .filter(section => section.trim());\n  \n    return (\n      <div className=\"message-content\">\n        {sections.map((section, idx) => (\n          <div key={idx} className=\"mb-4\">\n            {formatSection(section)}\n          </div>\n        ))}\n        \n        {context && context.length > 0 && (\n          <div className=\"context-info mt-6 bg-gray-50 p-4 rounded-lg\">\n            <h4 className=\"text-sm font-semibold text-gray-600 mb-3\">Relevant Source Excerpts:</h4>\n            <div className=\"space-y-3\">\n              {context.map((ctx, idx) => {\n                const relatedDoc = selectedDocs.find(d => d.id === ctx.documentId);\n                return (\n                  <div key={idx} className=\"bg-white p-3 rounded-md shadow-sm\">\n                    <div className=\"flex justify-between items-start gap-4\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm text-gray-500 mb-1\">\n                          From: {relatedDoc?.filename || `Document ${ctx.documentId}`}\n                        </p>\n                        <p className=\"text-sm\">{truncateContext(ctx.content)}</p>\n                      </div>\n                      <button\n                        className=\"px-3 py-1 text-sm text-blue-600 hover:bg-blue-50 rounded\"\n                        onClick={() => openPdfPage(relatedDoc?.file_url, ctx.page_number)}\n                      >\n                        Page {ctx.page_number}\n                      </button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n};\n\nexport default MessageFormatter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}