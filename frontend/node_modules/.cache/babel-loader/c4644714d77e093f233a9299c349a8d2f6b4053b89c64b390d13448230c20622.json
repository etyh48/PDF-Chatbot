{"ast":null,"code":"var _jsxFileName = \"/Users/ryantay/Desktop/Merctrans/pdf-reader/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport './App.css';\n// At the top of App.js, add this import:\nimport { FaUpload } from 'react-icons/fa';\nimport { FaFilePdf } from 'react-icons/fa';\nimport { FaTrash } from 'react-icons/fa';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { getDocument } from 'pdfjs-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = \"https://cdn.jsdelivr.net/npm/pdfjs-dist@4.9.155/build/pdf.worker.min.mjs\";\nconst supabase = createClient(process.env.REACT_APP_SUPABASE_URL, process.env.REACT_APP_SUPABASE_ANON_KEY);\nfunction App() {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [documents, setDocuments] = useState([]);\n  const [selectedDoc, setSelectedDoc] = useState(null);\n  const [query, setQuery] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState({});\n  const [isHistoryLoading, setIsHistoryLoading] = useState(false);\n  useEffect(() => {\n    if (selectedDoc) {\n      fetchChatHistory(selectedDoc.id);\n    }\n  }, [selectedDoc]);\n  const clearChat = async () => {\n    if (!selectedDoc) return;\n    try {\n      // Delete from database\n      const {\n        error\n      } = await supabase.from('chat_history').delete().eq('document_id', selectedDoc.id);\n      if (error) throw error;\n\n      // Clear local state\n      setChatHistory([]);\n    } catch (error) {\n      console.error('Error clearing chat:', error);\n      alert('Error clearing chat history');\n    }\n  };\n\n  // Add this function to fetch chat history\n  const fetchChatHistory = async documentId => {\n    setIsHistoryLoading(true);\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('chat_history').select('*').eq('document_id', documentId).order('created_at', {\n        ascending: true\n      });\n      if (error) throw error;\n      setChatHistory(data || []);\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n    } finally {\n      setIsHistoryLoading(false);\n    }\n  };\n  const handleDocumentSelect = async doc => {\n    setSelectedDoc(doc);\n    await fetchChatHistory(doc.id);\n  };\n  const handleDelete = async doc => {\n    try {\n      // Delete from storage\n      const {\n        error: storageError\n      } = await supabase.storage.from('pdfs').remove([doc.file_url.split('/').pop()]);\n      if (storageError) throw storageError;\n\n      // Delete from database\n      const {\n        error: dbError\n      } = await supabase.from('documents').delete().eq('id', doc.id);\n      if (dbError) throw dbError;\n\n      // Also delete related chunks\n      const {\n        error: chunksError\n      } = await supabase.from('document_chunks').delete().eq('document_id', doc.id);\n      if (chunksError) throw chunksError;\n\n      // Refresh documents list\n      fetchDocuments();\n      if ((selectedDoc === null || selectedDoc === void 0 ? void 0 : selectedDoc.id) === doc.id) {\n        setSelectedDoc(null);\n        setChatHistory([]);\n      }\n    } catch (error) {\n      console.error('Delete error:', error);\n      alert('Error deleting document');\n    }\n  };\n  useEffect(() => {\n    fetchDocuments();\n  }, []);\n  const fetchDocuments = async () => {\n    const {\n      data\n    } = await supabase.from('documents').select('*');\n    setDocuments(data || []);\n  };\n  const handleFileChange = e => {\n    const files = Array.from(e.target.files);\n    const validFiles = files.filter(file => {\n      const isValidType = file.type === 'application/pdf';\n      const isValidSize = file.size <= 10 * 1024 * 1024; // 10MB\n      if (!isValidType) alert(`${file.name} is not a PDF file`);\n      if (!isValidSize) alert(`${file.name} exceeds 10MB size limit`);\n      return isValidType && isValidSize;\n    });\n    setSelectedFiles(validFiles);\n  };\n\n  // In App.js, modify the fetch call in handleUpload:\n  const handleUpload = async () => {\n    if (!selectedFiles.length) return;\n    setLoading(true);\n    try {\n      for (const file of selectedFiles) {\n        setUploadProgress(prev => ({\n          ...prev,\n          [file.name]: 0\n        }));\n\n        // 1. Upload to Supabase Storage\n        const {\n          data: uploadData,\n          error: uploadError\n        } = await supabase.storage.from('pdfs').upload(`${Date.now()}_${file.name}`, file);\n        if (uploadError) throw uploadError;\n\n        // 2. Get public URL\n        const {\n          data: {\n            publicUrl\n          }\n        } = supabase.storage.from('pdfs').getPublicUrl(uploadData.path);\n\n        // 3. Create document record\n        const {\n          data: docData,\n          error: docError\n        } = await supabase.from('documents').insert({\n          filename: file.name,\n          file_url: publicUrl\n        }).select().single();\n        if (docError) throw docError;\n\n        // 4. Extract text from PDF\n        const arrayBuffer = await file.arrayBuffer();\n        const pdf = await getDocument({\n          data: arrayBuffer\n        }).promise;\n        let fullText = '';\n        for (let i = 1; i <= pdf.numPages; i++) {\n          const page = await pdf.getPage(i);\n          const textContent = await page.getTextContent();\n          const pageText = textContent.items.map(item => item.str).join(' ');\n          fullText += pageText + ' ';\n\n          // Update progress to show PDF processing\n          setUploadProgress(prev => ({\n            ...prev,\n            [file.name]: i / pdf.numPages * 50 // First 50% for PDF processing\n          }));\n        }\n\n        // 5. Process text and create chunks\n        const response = await fetch(`${process.env.REACT_APP_SUPABASE_URL}/functions/v1/process-pdf`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${process.env.REACT_APP_SUPABASE_ANON_KEY}`\n          },\n          body: JSON.stringify({\n            documentId: docData.id,\n            text: fullText.trim()\n          })\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Failed to process ${file.name}: ${errorText}`);\n        }\n        setUploadProgress(prev => ({\n          ...prev,\n          [file.name]: 100\n        }));\n      }\n\n      // Clear selected files and refresh document list\n      setSelectedFiles([]);\n      setUploadProgress({});\n      fetchDocuments();\n    } catch (error) {\n      console.error('Upload error:', error);\n      alert('Error uploading files: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Modify handleQuerySubmit to store chat history\n  const handleQuerySubmit = async e => {\n    e.preventDefault();\n    if (!query.trim() || !selectedDoc) return;\n    setLoading(true);\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SUPABASE_URL}/functions/v1/process-query`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_SUPABASE_ANON_KEY}`\n        },\n        body: JSON.stringify({\n          query: query.trim(),\n          documentId: selectedDoc.id,\n          chatHistory: chatHistory\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error('Failed to process query: ' + errorText);\n      }\n      const result = await response.json();\n\n      // Create new chat entry\n      const newEntry = {\n        document_id: selectedDoc.id,\n        query: query.trim(),\n        response: result.answer,\n        context: result.context\n      };\n\n      // Store in database\n      const {\n        error: insertError\n      } = await supabase.from('chat_history').insert(newEntry);\n      if (insertError) throw insertError;\n\n      // Update local state\n      await fetchChatHistory(selectedDoc.id);\n      setQuery('');\n    } catch (error) {\n      console.error('Query error:', error);\n      alert(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"PDF Documents\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"upload-button\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \".pdf\",\n              multiple: true,\n              onChange: handleFileChange,\n              disabled: loading,\n              className: \"hidden\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(FaUpload, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 13\n            }, this), \" Choose Files\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"upload-submit\",\n            onClick: handleUpload,\n            disabled: !selectedFiles.length || loading,\n            children: [\"Upload \", selectedFiles.length ? `(${selectedFiles.length})` : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 9\n        }, this), Object.entries(uploadProgress).map(([filename, progress]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-progress\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"filename\",\n            children: filename\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress\",\n              style: {\n                width: `${progress}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 13\n          }, this)]\n        }, filename, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"documents-list\",\n        children: documents.map(doc => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `document-item ${(selectedDoc === null || selectedDoc === void 0 ? void 0 : selectedDoc.id) === doc.id ? 'selected' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"document-info\",\n            onClick: () => handleDocumentSelect(doc),\n            children: [/*#__PURE__*/_jsxDEV(FaFilePdf, {\n              className: \"doc-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 338,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"doc-name\",\n              children: doc.filename\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete-button\",\n            onClick: () => handleDelete(doc),\n            children: /*#__PURE__*/_jsxDEV(FaTrash, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this)]\n        }, doc.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: selectedDoc ? /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Chat about: \", selectedDoc.filename]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select a document to start chatting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: isHistoryLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-message\",\n          children: \"Loading chat history...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 5\n        }, this) : chatHistory.map((chat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-entry\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-message\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"You:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 13\n              }, this), \" \", chat.query]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ai-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"AI:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 13\n              }, this), \" \", chat.response]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 11\n            }, this), chat.context && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"context-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                children: \"Source Context:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"context-content\",\n                children: chat.context.map((ctx, idx) => /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: ctx.content\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 19\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 9\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleQuerySubmit,\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: query,\n          onChange: e => setQuery(e.target.value),\n          placeholder: selectedDoc ? \"Ask a question...\" : \"Select a document first\",\n          disabled: !selectedDoc || loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !selectedDoc || loading || !query.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"+U5Q9BtkydPU6+kYKh9RSFrk224=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","createClient","FaUpload","FaFilePdf","FaTrash","pdfjsLib","getDocument","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","supabase","process","env","REACT_APP_SUPABASE_URL","REACT_APP_SUPABASE_ANON_KEY","App","_s","selectedFiles","setSelectedFiles","documents","setDocuments","selectedDoc","setSelectedDoc","query","setQuery","chatHistory","setChatHistory","loading","setLoading","uploadProgress","setUploadProgress","isHistoryLoading","setIsHistoryLoading","fetchChatHistory","id","clearChat","error","from","delete","eq","console","alert","documentId","data","select","order","ascending","handleDocumentSelect","doc","handleDelete","storageError","storage","remove","file_url","split","pop","dbError","chunksError","fetchDocuments","handleFileChange","e","files","Array","target","validFiles","filter","file","isValidType","type","isValidSize","size","name","handleUpload","length","prev","uploadData","uploadError","upload","Date","now","publicUrl","getPublicUrl","path","docData","docError","insert","filename","single","arrayBuffer","pdf","promise","fullText","i","numPages","page","getPage","textContent","getTextContent","pageText","items","map","item","str","join","response","fetch","method","headers","body","JSON","stringify","text","trim","ok","errorText","Error","message","handleQuerySubmit","preventDefault","result","json","newEntry","document_id","answer","context","insertError","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","multiple","onChange","disabled","onClick","Object","entries","progress","style","width","chat","index","ctx","idx","content","onSubmit","value","placeholder","_c","$RefreshReg$"],"sources":["/Users/ryantay/Desktop/Merctrans/pdf-reader/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport './App.css';\n// At the top of App.js, add this import:\nimport { FaUpload } from 'react-icons/fa';\nimport { FaFilePdf } from 'react-icons/fa';\nimport { FaTrash } from 'react-icons/fa';\n\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { getDocument } from 'pdfjs-dist';\npdfjsLib.GlobalWorkerOptions.workerSrc = \"https://cdn.jsdelivr.net/npm/pdfjs-dist@4.9.155/build/pdf.worker.min.mjs\"; \n\n\nconst supabase = createClient(\n  process.env.REACT_APP_SUPABASE_URL,\n  process.env.REACT_APP_SUPABASE_ANON_KEY\n);\n\nfunction App() {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [documents, setDocuments] = useState([]);\n  const [selectedDoc, setSelectedDoc] = useState(null);\n  const [query, setQuery] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState({});\n  const [isHistoryLoading, setIsHistoryLoading] = useState(false);\n\n  useEffect(() => {\n    if (selectedDoc) {\n      fetchChatHistory(selectedDoc.id);\n    }\n  }, [selectedDoc]);\n\n  const clearChat = async () => {\n    if (!selectedDoc) return;\n    \n    try {\n      // Delete from database\n      const { error } = await supabase\n        .from('chat_history')\n        .delete()\n        .eq('document_id', selectedDoc.id);\n  \n      if (error) throw error;\n  \n      // Clear local state\n      setChatHistory([]);\n    } catch (error) {\n      console.error('Error clearing chat:', error);\n      alert('Error clearing chat history');\n    }\n  };\n\n  // Add this function to fetch chat history\n  const fetchChatHistory = async (documentId) => {\n  setIsHistoryLoading(true);\n  try {\n    const { data, error } = await supabase\n      .from('chat_history')\n      .select('*')\n      .eq('document_id', documentId)\n      .order('created_at', { ascending: true });\n\n    if (error) throw error;\n    setChatHistory(data || []);\n  } catch (error) {\n    console.error('Error fetching chat history:', error);\n  } finally {\n    setIsHistoryLoading(false);\n  }\n};\n\n  const handleDocumentSelect = async (doc) => {\n  setSelectedDoc(doc);\n  await fetchChatHistory(doc.id);\n};\n\n  \n  const handleDelete = async (doc) => {\n    try {\n      // Delete from storage\n      const { error: storageError } = await supabase.storage\n        .from('pdfs')\n        .remove([doc.file_url.split('/').pop()]);\n      \n      if (storageError) throw storageError;\n\n      // Delete from database\n      const { error: dbError } = await supabase\n        .from('documents')\n        .delete()\n        .eq('id', doc.id);\n\n      if (dbError) throw dbError;\n\n      // Also delete related chunks\n      const { error: chunksError } = await supabase\n        .from('document_chunks')\n        .delete()\n        .eq('document_id', doc.id);\n\n      if (chunksError) throw chunksError;\n\n      // Refresh documents list\n      fetchDocuments();\n      if (selectedDoc?.id === doc.id) {\n        setSelectedDoc(null);\n        setChatHistory([]);\n      }\n    } catch (error) {\n      console.error('Delete error:', error);\n      alert('Error deleting document');\n    }\n  };\n\n\n  useEffect(() => {\n    fetchDocuments();\n  }, []);\n\n  const fetchDocuments = async () => {\n    const { data } = await supabase.from('documents').select('*');\n    setDocuments(data || []);\n  };\n\n  const handleFileChange = (e) => {\n    const files = Array.from(e.target.files);\n    const validFiles = files.filter(file => {\n      const isValidType = file.type === 'application/pdf';\n      const isValidSize = file.size <= 10 * 1024 * 1024; // 10MB\n      if (!isValidType) alert(`${file.name} is not a PDF file`);\n      if (!isValidSize) alert(`${file.name} exceeds 10MB size limit`);\n      return isValidType && isValidSize;\n    });\n    setSelectedFiles(validFiles);\n  };\n\n  // In App.js, modify the fetch call in handleUpload:\n  const handleUpload = async () => {\n    if (!selectedFiles.length) return;\n  \n    setLoading(true);\n    try {\n      for (const file of selectedFiles) {\n        setUploadProgress(prev => ({ ...prev, [file.name]: 0 }));\n  \n        // 1. Upload to Supabase Storage\n        const { data: uploadData, error: uploadError } = await supabase.storage\n          .from('pdfs')\n          .upload(`${Date.now()}_${file.name}`, file);\n  \n        if (uploadError) throw uploadError;\n  \n        // 2. Get public URL\n        const { data: { publicUrl } } = supabase.storage\n          .from('pdfs')\n          .getPublicUrl(uploadData.path);\n  \n        // 3. Create document record\n        const { data: docData, error: docError } = await supabase\n          .from('documents')\n          .insert({\n            filename: file.name,\n            file_url: publicUrl\n          })\n          .select()\n          .single();\n  \n        if (docError) throw docError;\n  \n        // 4. Extract text from PDF\n        const arrayBuffer = await file.arrayBuffer();\n        const pdf = await getDocument({ data: arrayBuffer }).promise;\n        let fullText = '';\n        \n        for (let i = 1; i <= pdf.numPages; i++) {\n          const page = await pdf.getPage(i);\n          const textContent = await page.getTextContent();\n          const pageText = textContent.items.map(item => item.str).join(' ');\n          fullText += pageText + ' ';\n          \n          // Update progress to show PDF processing\n          setUploadProgress(prev => ({\n            ...prev,\n            [file.name]: (i / pdf.numPages) * 50 // First 50% for PDF processing\n          }));\n        }\n  \n        // 5. Process text and create chunks\n        const response = await fetch(\n          `${process.env.REACT_APP_SUPABASE_URL}/functions/v1/process-pdf`,\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${process.env.REACT_APP_SUPABASE_ANON_KEY}`\n            },\n            body: JSON.stringify({\n              documentId: docData.id,\n              text: fullText.trim()\n            })\n          }\n        );\n  \n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Failed to process ${file.name}: ${errorText}`);\n        }\n  \n        setUploadProgress(prev => ({ ...prev, [file.name]: 100 }));\n      }\n  \n      // Clear selected files and refresh document list\n      setSelectedFiles([]);\n      setUploadProgress({});\n      fetchDocuments();\n    } catch (error) {\n      console.error('Upload error:', error);\n      alert('Error uploading files: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  \n\n\n\n  // Modify handleQuerySubmit to store chat history\n  const handleQuerySubmit = async (e) => {\n  e.preventDefault();\n  if (!query.trim() || !selectedDoc) return;\n\n  setLoading(true);\n  try {\n    const response = await fetch(\n      `${process.env.REACT_APP_SUPABASE_URL}/functions/v1/process-query`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_SUPABASE_ANON_KEY}`\n        },\n        body: JSON.stringify({\n          query: query.trim(),\n          documentId: selectedDoc.id,\n          chatHistory: chatHistory\n        })\n      }\n    );\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error('Failed to process query: ' + errorText);\n    }\n\n    const result = await response.json();\n    \n    // Create new chat entry\n    const newEntry = {\n      document_id: selectedDoc.id,\n      query: query.trim(),\n      response: result.answer,\n      context: result.context\n    };\n\n    // Store in database\n    const { error: insertError } = await supabase\n      .from('chat_history')\n      .insert(newEntry);\n\n    if (insertError) throw insertError;\n\n    // Update local state\n    await fetchChatHistory(selectedDoc.id);\n    setQuery('');\n  } catch (error) {\n    console.error('Query error:', error);\n    alert(error.message);\n  } finally {\n    setLoading(false);\n  }\n};\n\n  \n\nreturn (\n  <div className=\"app-container\">\n    <div className=\"sidebar\">\n      <div className=\"upload-section\">\n        <h2>PDF Documents</h2>\n        <div className=\"upload-controls\">\n          <label className=\"upload-button\">\n            <input\n              type=\"file\"\n              accept=\".pdf\"\n              multiple\n              onChange={handleFileChange}\n              disabled={loading}\n              className=\"hidden\"\n            />\n            <FaUpload /> Choose Files\n          </label>\n          <button \n            className=\"upload-submit\"\n            onClick={handleUpload}\n            disabled={!selectedFiles.length || loading}\n          >\n            Upload {selectedFiles.length ? `(${selectedFiles.length})` : ''}\n          </button>\n        </div>\n        {Object.entries(uploadProgress).map(([filename, progress]) => (\n          <div key={filename} className=\"upload-progress\">\n            <span className=\"filename\">{filename}</span>\n            <div className=\"progress-bar\">\n              <div \n                className=\"progress\" \n                style={{ width: `${progress}%` }}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"documents-list\">\n        {documents.map(doc => (\n          <div\n            key={doc.id}\n            className={`document-item ${selectedDoc?.id === doc.id ? 'selected' : ''}`}\n          >\n            <div \n              className=\"document-info\"\n              onClick={() => handleDocumentSelect(doc)}\n            >\n              <FaFilePdf className=\"doc-icon\" />\n              <span className=\"doc-name\">{doc.filename}</span>\n            </div>\n            <button \n              className=\"delete-button\"\n              onClick={() => handleDelete(doc)}\n            >\n              <FaTrash />\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n\n    <div className=\"chat-container\">\n      <div className=\"chat-header\">\n        {selectedDoc ? (\n          <h2>Chat about: {selectedDoc.filename}</h2>\n        ) : (\n          <h2>Select a document to start chatting</h2>\n        )}\n      </div>\n\n      <div className=\"chat-messages\">\n  {isHistoryLoading ? (\n    <div className=\"loading-message\">Loading chat history...</div>\n  ) : (\n    chatHistory.map((chat, index) => (\n      <div key={index} className=\"chat-entry\">\n        <div className=\"user-message\">\n          <div className=\"message-content\">\n            <strong>You:</strong> {chat.query}\n          </div>\n        </div>\n        <div className=\"ai-message\">\n          <div className=\"message-content\">\n            <strong>AI:</strong> {chat.response}\n          </div>\n          {chat.context && (\n            <div className=\"context-info\">\n              <small>Source Context:</small>\n              <div className=\"context-content\">\n                {chat.context.map((ctx, idx) => (\n                  <p key={idx}>{ctx.content}</p>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    ))\n  )}\n</div>\n\n      <form onSubmit={handleQuerySubmit} className=\"chat-input\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder={selectedDoc ? \"Ask a question...\" : \"Select a document first\"}\n          disabled={!selectedDoc || loading}\n        />\n        <button \n          type=\"submit\" \n          disabled={!selectedDoc || loading || !query.trim()}\n        >\n          Send\n        </button>\n      </form>\n    </div>\n  </div>\n);\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}