{"ast":null,"code":"var _jsxFileName = \"/Users/ryantay/Desktop/Merctrans/pdf-reader/frontend/src/components/MessageFormatter.js\";\nimport React from 'react';\n// Add these styles to your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = `\n.message-content {\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\n.message-content h1, .message-content h2, .message-content h3,\n.message-content h4, .message-content h5, .message-content h6 {\n  margin-top: 1.5em;\n  margin-bottom: 0.5em;\n  font-weight: 600;\n}\n\n.message-content ul, .message-content ol {\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n}\n\n.message-content li {\n  margin-bottom: 0.25em;\n}\n\n.message-content code {\n  background-color: #f0f0f0;\n  padding: 0.2em 0.4em;\n  border-radius: 3px;\n  font-family: monospace;\n}\n`;\nconst MessageFormatter = ({\n  content,\n  context,\n  selectedDocs,\n  openPdfPage\n}) => {\n  const formatText = text => {\n    if (!text) return '';\n\n    // Handle different types of emphasis/formatting\n    let formattedText = text\n    // Bold text (both ** and __ syntax)\n    .replace(/(\\*\\*|__)(.*?)\\1/g, '<strong>$2</strong>')\n    // Italic text (both * and _ syntax)\n    .replace(/(\\*|_)(.*?)\\1/g, '<em>$2</em>')\n    // Headers\n    .replace(/^(#{1,6})\\s+(.+)$/gm, (match, hashes, content) => {\n      const level = hashes.length;\n      return `<h${level} class=\"text-${getHeaderSize(level)} font-bold my-2\">${content}</h${level}>`;\n    })\n    // Number formatting\n    .replace(/(\\$?\\d+(?:,\\d{3})*(?:\\.\\d+)?(?:\\s*(?:million|billion|trillion))?)/g, '<span class=\"font-mono\">$1</span>');\n    return formattedText;\n  };\n  const getHeaderSize = level => {\n    const sizes = {\n      1: 'xl',\n      2: 'lg',\n      3: 'base',\n      4: 'sm',\n      5: 'xs',\n      6: 'xs'\n    };\n    return sizes[level] || 'base';\n  };\n  const formatSection = section => {\n    // Check if section is a list\n    if (section.includes('* ') || section.includes('• ')) {\n      const items = section.split(/(?:\\* |• )/).filter(item => item.trim()).map(item => formatText(item.trim()));\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc pl-6 space-y-2\",\n        children: items.map((item, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"mb-2\",\n          dangerouslySetInnerHTML: {\n            __html: item\n          }\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Handle sections starting with **Section Name:**\n    const sectionTitleMatch = section.match(/^\\*\\*(.*?)\\*\\*:/);\n    if (sectionTitleMatch) {\n      const [fullMatch, title] = sectionTitleMatch;\n      const content = section.slice(fullMatch.length).trim();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-bold mb-2\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          dangerouslySetInnerHTML: {\n            __html: formatText(content)\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Regular paragraph\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mb-4\",\n      dangerouslySetInnerHTML: {\n        __html: formatText(section)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  };\n  const sections = content.split('\\n\\n').filter(section => section.trim());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"message-content\",\n    children: [sections.map((section, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: formatSection(section)\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)), context && context.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"context-info mt-6 bg-gray-50 p-4 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-sm font-semibold text-gray-600 mb-3\",\n        children: \"Relevant Source Excerpts:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-y-3\",\n        children: context.map((ctx, idx) => {\n          const relatedDoc = selectedDocs.find(d => d.id === ctx.documentId);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-white p-3 rounded-md shadow-sm\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-start gap-4\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex-1\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm text-gray-500 mb-1\",\n                  children: [\"From: \", (relatedDoc === null || relatedDoc === void 0 ? void 0 : relatedDoc.filename) || `Document ${ctx.documentId}`]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 132,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-sm\",\n                  children: ctx.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"px-3 py-1 text-sm text-blue-600 hover:bg-blue-50 rounded\",\n                onClick: () => openPdfPage(relatedDoc === null || relatedDoc === void 0 ? void 0 : relatedDoc.file_url, ctx.page_number),\n                children: [\"Page \", ctx.page_number]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 19\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_c = MessageFormatter;\nexport default MessageFormatter;\nvar _c;\n$RefreshReg$(_c, \"MessageFormatter\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","styles","MessageFormatter","content","context","selectedDocs","openPdfPage","formatText","text","formattedText","replace","match","hashes","level","length","getHeaderSize","sizes","formatSection","section","includes","items","split","filter","item","trim","map","className","children","idx","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","sectionTitleMatch","fullMatch","title","slice","sections","ctx","relatedDoc","find","d","id","documentId","filename","onClick","file_url","page_number","_c","$RefreshReg$"],"sources":["/Users/ryantay/Desktop/Merctrans/pdf-reader/frontend/src/components/MessageFormatter.js"],"sourcesContent":["import React from 'react';\n// Add these styles to your CSS file\nconst styles = `\n.message-content {\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\n.message-content h1, .message-content h2, .message-content h3,\n.message-content h4, .message-content h5, .message-content h6 {\n  margin-top: 1.5em;\n  margin-bottom: 0.5em;\n  font-weight: 600;\n}\n\n.message-content ul, .message-content ol {\n  margin-top: 0.5em;\n  margin-bottom: 0.5em;\n}\n\n.message-content li {\n  margin-bottom: 0.25em;\n}\n\n.message-content code {\n  background-color: #f0f0f0;\n  padding: 0.2em 0.4em;\n  border-radius: 3px;\n  font-family: monospace;\n}\n`;\n\nconst MessageFormatter = ({ content, context, selectedDocs, openPdfPage }) => {\n  const formatText = (text) => {\n    if (!text) return '';\n    \n    // Handle different types of emphasis/formatting\n    let formattedText = text\n      // Bold text (both ** and __ syntax)\n      .replace(/(\\*\\*|__)(.*?)\\1/g, '<strong>$2</strong>')\n      // Italic text (both * and _ syntax)\n      .replace(/(\\*|_)(.*?)\\1/g, '<em>$2</em>')\n      // Headers\n      .replace(/^(#{1,6})\\s+(.+)$/gm, (match, hashes, content) => {\n        const level = hashes.length;\n        return `<h${level} class=\"text-${getHeaderSize(level)} font-bold my-2\">${content}</h${level}>`;\n      })\n      // Number formatting\n      .replace(/(\\$?\\d+(?:,\\d{3})*(?:\\.\\d+)?(?:\\s*(?:million|billion|trillion))?)/g, \n        '<span class=\"font-mono\">$1</span>');\n\n    return formattedText;\n  };\n\n  const getHeaderSize = (level) => {\n    const sizes = {\n      1: 'xl',\n      2: 'lg',\n      3: 'base',\n      4: 'sm',\n      5: 'xs',\n      6: 'xs'\n    };\n    return sizes[level] || 'base';\n  };\n\n  const formatSection = (section) => {\n    // Check if section is a list\n    if (section.includes('* ') || section.includes('• ')) {\n      const items = section\n        .split(/(?:\\* |• )/)\n        .filter(item => item.trim())\n        .map(item => formatText(item.trim()));\n      \n      return (\n        <ul className=\"list-disc pl-6 space-y-2\">\n          {items.map((item, idx) => (\n            <li \n              key={idx} \n              className=\"mb-2\"\n              dangerouslySetInnerHTML={{ __html: item }}\n            />\n          ))}\n        </ul>\n      );\n    }\n\n    // Handle sections starting with **Section Name:**\n    const sectionTitleMatch = section.match(/^\\*\\*(.*?)\\*\\*:/);\n    if (sectionTitleMatch) {\n      const [fullMatch, title] = sectionTitleMatch;\n      const content = section.slice(fullMatch.length).trim();\n      return (\n        <div className=\"mb-4\">\n          <h3 className=\"font-bold mb-2\">{title}</h3>\n          <div dangerouslySetInnerHTML={{ __html: formatText(content) }} />\n        </div>\n      );\n    }\n\n    // Regular paragraph\n    return (\n      <p \n        className=\"mb-4\"\n        dangerouslySetInnerHTML={{ __html: formatText(section) }}\n      />\n    );\n  };\n\n  const sections = content\n    .split('\\n\\n')\n    .filter(section => section.trim());\n\n  return (\n    <div className=\"message-content\">\n      {sections.map((section, idx) => (\n        <div key={idx} className=\"mb-4\">\n          {formatSection(section)}\n        </div>\n      ))}\n      \n      {context && context.length > 0 && (\n        <div className=\"context-info mt-6 bg-gray-50 p-4 rounded-lg\">\n          <h4 className=\"text-sm font-semibold text-gray-600 mb-3\">Relevant Source Excerpts:</h4>\n          <div className=\"space-y-3\">\n            {context.map((ctx, idx) => {\n              const relatedDoc = selectedDocs.find(d => d.id === ctx.documentId);\n              return (\n                <div key={idx} className=\"bg-white p-3 rounded-md shadow-sm\">\n                  <div className=\"flex justify-between items-start gap-4\">\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm text-gray-500 mb-1\">\n                        From: {relatedDoc?.filename || `Document ${ctx.documentId}`}\n                      </p>\n                      <p className=\"text-sm\">{ctx.content}</p>\n                    </div>\n                    <button\n                      className=\"px-3 py-1 text-sm text-blue-600 hover:bg-blue-50 rounded\"\n                      onClick={() => openPdfPage(relatedDoc?.file_url, ctx.page_number)}\n                    >\n                      Page {ctx.page_number}\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MessageFormatter;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,MAAM,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,OAAO;EAAEC,OAAO;EAAEC,YAAY;EAAEC;AAAY,CAAC,KAAK;EAC5E,MAAMC,UAAU,GAAIC,IAAI,IAAK;IAC3B,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;;IAEpB;IACA,IAAIC,aAAa,GAAGD;IAClB;IAAA,CACCE,OAAO,CAAC,mBAAmB,EAAE,qBAAqB;IACnD;IAAA,CACCA,OAAO,CAAC,gBAAgB,EAAE,aAAa;IACxC;IAAA,CACCA,OAAO,CAAC,qBAAqB,EAAE,CAACC,KAAK,EAAEC,MAAM,EAAET,OAAO,KAAK;MAC1D,MAAMU,KAAK,GAAGD,MAAM,CAACE,MAAM;MAC3B,OAAO,KAAKD,KAAK,gBAAgBE,aAAa,CAACF,KAAK,CAAC,oBAAoBV,OAAO,MAAMU,KAAK,GAAG;IAChG,CAAC;IACD;IAAA,CACCH,OAAO,CAAC,oEAAoE,EAC3E,mCAAmC,CAAC;IAExC,OAAOD,aAAa;EACtB,CAAC;EAED,MAAMM,aAAa,GAAIF,KAAK,IAAK;IAC/B,MAAMG,KAAK,GAAG;MACZ,CAAC,EAAE,IAAI;MACP,CAAC,EAAE,IAAI;MACP,CAAC,EAAE,MAAM;MACT,CAAC,EAAE,IAAI;MACP,CAAC,EAAE,IAAI;MACP,CAAC,EAAE;IACL,CAAC;IACD,OAAOA,KAAK,CAACH,KAAK,CAAC,IAAI,MAAM;EAC/B,CAAC;EAED,MAAMI,aAAa,GAAIC,OAAO,IAAK;IACjC;IACA,IAAIA,OAAO,CAACC,QAAQ,CAAC,IAAI,CAAC,IAAID,OAAO,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;MACpD,MAAMC,KAAK,GAAGF,OAAO,CAClBG,KAAK,CAAC,YAAY,CAAC,CACnBC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAC3BC,GAAG,CAACF,IAAI,IAAIhB,UAAU,CAACgB,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;MAEvC,oBACExB,OAAA;QAAI0B,SAAS,EAAC,0BAA0B;QAAAC,QAAA,EACrCP,KAAK,CAACK,GAAG,CAAC,CAACF,IAAI,EAAEK,GAAG,kBACnB5B,OAAA;UAEE0B,SAAS,EAAC,MAAM;UAChBG,uBAAuB,EAAE;YAAEC,MAAM,EAAEP;UAAK;QAAE,GAFrCK,GAAG;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGT,CACF;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAET;;IAEA;IACA,MAAMC,iBAAiB,GAAGjB,OAAO,CAACP,KAAK,CAAC,iBAAiB,CAAC;IAC1D,IAAIwB,iBAAiB,EAAE;MACrB,MAAM,CAACC,SAAS,EAAEC,KAAK,CAAC,GAAGF,iBAAiB;MAC5C,MAAMhC,OAAO,GAAGe,OAAO,CAACoB,KAAK,CAACF,SAAS,CAACtB,MAAM,CAAC,CAACU,IAAI,CAAC,CAAC;MACtD,oBACExB,OAAA;QAAK0B,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnB3B,OAAA;UAAI0B,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAAEU;QAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC3ClC,OAAA;UAAK6B,uBAAuB,EAAE;YAAEC,MAAM,EAAEvB,UAAU,CAACJ,OAAO;UAAE;QAAE;UAAA4B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9D,CAAC;IAEV;;IAEA;IACA,oBACElC,OAAA;MACE0B,SAAS,EAAC,MAAM;MAChBG,uBAAuB,EAAE;QAAEC,MAAM,EAAEvB,UAAU,CAACW,OAAO;MAAE;IAAE;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CAAC;EAEN,CAAC;EAED,MAAMK,QAAQ,GAAGpC,OAAO,CACrBkB,KAAK,CAAC,MAAM,CAAC,CACbC,MAAM,CAACJ,OAAO,IAAIA,OAAO,CAACM,IAAI,CAAC,CAAC,CAAC;EAEpC,oBACExB,OAAA;IAAK0B,SAAS,EAAC,iBAAiB;IAAAC,QAAA,GAC7BY,QAAQ,CAACd,GAAG,CAAC,CAACP,OAAO,EAAEU,GAAG,kBACzB5B,OAAA;MAAe0B,SAAS,EAAC,MAAM;MAAAC,QAAA,EAC5BV,aAAa,CAACC,OAAO;IAAC,GADfU,GAAG;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAER,CACN,CAAC,EAED9B,OAAO,IAAIA,OAAO,CAACU,MAAM,GAAG,CAAC,iBAC5Bd,OAAA;MAAK0B,SAAS,EAAC,6CAA6C;MAAAC,QAAA,gBAC1D3B,OAAA;QAAI0B,SAAS,EAAC,0CAA0C;QAAAC,QAAA,EAAC;MAAyB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvFlC,OAAA;QAAK0B,SAAS,EAAC,WAAW;QAAAC,QAAA,EACvBvB,OAAO,CAACqB,GAAG,CAAC,CAACe,GAAG,EAAEZ,GAAG,KAAK;UACzB,MAAMa,UAAU,GAAGpC,YAAY,CAACqC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKJ,GAAG,CAACK,UAAU,CAAC;UAClE,oBACE7C,OAAA;YAAe0B,SAAS,EAAC,mCAAmC;YAAAC,QAAA,eAC1D3B,OAAA;cAAK0B,SAAS,EAAC,wCAAwC;cAAAC,QAAA,gBACrD3B,OAAA;gBAAK0B,SAAS,EAAC,QAAQ;gBAAAC,QAAA,gBACrB3B,OAAA;kBAAG0B,SAAS,EAAC,4BAA4B;kBAAAC,QAAA,GAAC,QAClC,EAAC,CAAAc,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEK,QAAQ,KAAI,YAAYN,GAAG,CAACK,UAAU,EAAE;gBAAA;kBAAAd,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC1D,CAAC,eACJlC,OAAA;kBAAG0B,SAAS,EAAC,SAAS;kBAAAC,QAAA,EAAEa,GAAG,CAACrC;gBAAO;kBAAA4B,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACrC,CAAC,eACNlC,OAAA;gBACE0B,SAAS,EAAC,0DAA0D;gBACpEqB,OAAO,EAAEA,CAAA,KAAMzC,WAAW,CAACmC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEO,QAAQ,EAAER,GAAG,CAACS,WAAW,CAAE;gBAAAtB,QAAA,GACnE,OACM,EAACa,GAAG,CAACS,WAAW;cAAA;gBAAAlB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACf,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN;UAAC,GAdEN,GAAG;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAeR,CAAC;QAEV,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACgB,EAAA,GAvHIhD,gBAAgB;AAyHtB,eAAeA,gBAAgB;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}