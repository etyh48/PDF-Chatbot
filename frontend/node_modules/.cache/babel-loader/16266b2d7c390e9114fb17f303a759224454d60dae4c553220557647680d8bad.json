{"ast":null,"code":"var _jsxFileName = \"/Users/ryantay/Desktop/Merctrans/pdf-reader/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport './App.css';\nimport PDFViewer from './components/PDFViewer';\n// At the top of App.js, add this import:\nimport { FaUpload } from 'react-icons/fa';\nimport { FaFilePdf } from 'react-icons/fa';\nimport { FaTrash } from 'react-icons/fa';\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { getDocument } from 'pdfjs-dist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\npdfjsLib.GlobalWorkerOptions.workerSrc = \"https://cdn.jsdelivr.net/npm/pdfjs-dist@4.9.155/build/pdf.worker.min.mjs\";\nconst supabase = createClient(process.env.REACT_APP_SUPABASE_URL, process.env.REACT_APP_SUPABASE_ANON_KEY);\nfunction App() {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [documents, setDocuments] = useState([]);\n  const [selectedDoc, setSelectedDoc] = useState(null);\n  const [query, setQuery] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState({});\n  const [isHistoryLoading, setIsHistoryLoading] = useState(false);\n  useEffect(() => {\n    if (selectedDoc) {\n      fetchChatHistory(selectedDoc.id);\n    }\n  }, [selectedDoc]);\n  const clearChat = async () => {\n    if (!selectedDoc) return;\n    try {\n      // Delete from database\n      const {\n        error\n      } = await supabase.from('chat_history').delete().eq('document_id', selectedDoc.id);\n      if (error) throw error;\n\n      // Clear local state\n      setChatHistory([]);\n    } catch (error) {\n      console.error('Error clearing chat:', error);\n      alert('Error clearing chat history');\n    }\n  };\n  const [pdfViewerState, setPdfViewerState] = useState({\n    isOpen: false,\n    url: null,\n    pageNumber: null\n  });\n\n  // Update the openPdfPage function\n  const openPdfPage = async (url, pageNumber) => {\n    try {\n      const {\n        data: signedUrlData,\n        error\n      } = await supabase.storage.from('pdfs').createSignedUrl(url.split('/').pop(), 3600);\n      if (error) throw error;\n      if (signedUrlData !== null && signedUrlData !== void 0 && signedUrlData.signedUrl) {\n        // Ensure pageNumber is a valid number\n        const page = parseInt(pageNumber, 10) || 1;\n\n        // Log for debugging\n        console.log('Opening PDF:', {\n          url: signedUrlData.signedUrl,\n          pageNumber: page\n        });\n        const viewerUrl = `/pdfjs/viewer.html?file=${encodeURIComponent(signedUrlData.signedUrl)}&page=${page}`;\n        window.open(viewerUrl, '_blank');\n      }\n    } catch (error) {\n      console.error('Error opening PDF:', error);\n      alert('Error opening PDF');\n    }\n  };\n\n  // Add close function\n  const closePdfViewer = () => {\n    setPdfViewerState({\n      isOpen: false,\n      url: null,\n      pageNumber: null\n    });\n  };\n\n  // Add this function to fetch chat history\n  const fetchChatHistory = async documentId => {\n    setIsHistoryLoading(true);\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('chat_history').select('*').eq('document_id', documentId).order('created_at', {\n        ascending: true\n      });\n      if (error) throw error;\n      setChatHistory(data || []);\n    } catch (error) {\n      console.error('Error fetching chat history:', error);\n    } finally {\n      setIsHistoryLoading(false);\n    }\n  };\n  const handleDocumentSelect = async doc => {\n    setSelectedDoc(doc);\n    await fetchChatHistory(doc.id);\n  };\n  const handleDelete = async doc => {\n    try {\n      // Delete from storage first\n      const filename = doc.file_url.split('/').pop();\n      const {\n        error: storageError\n      } = await supabase.storage.from('pdfs').remove([filename]);\n      if (storageError) throw storageError;\n\n      // Delete document (will cascade delete chunks)\n      const {\n        error: deleteError\n      } = await supabase.from('documents').delete().eq('id', doc.id);\n      if (deleteError) throw deleteError;\n\n      // Refresh documents list\n      fetchDocuments();\n    } catch (error) {\n      console.error('Delete error:', error);\n      alert('Error deleting document');\n    }\n  };\n  useEffect(() => {\n    fetchDocuments();\n  }, []);\n  const fetchDocuments = async () => {\n    const {\n      data\n    } = await supabase.from('documents').select('*');\n    setDocuments(data || []);\n  };\n  const handleFileChange = e => {\n    const files = Array.from(e.target.files);\n    const validFiles = files.filter(file => {\n      const isValidType = file.type === 'application/pdf';\n      const isValidSize = file.size <= 10 * 1024 * 1024; // 10MB\n      if (!isValidType) alert(`${file.name} is not a PDF file`);\n      if (!isValidSize) alert(`${file.name} exceeds 10MB size limit`);\n      return isValidType && isValidSize;\n    });\n    setSelectedFiles(validFiles);\n  };\n\n  // In App.js, modify the fetch call in handleUpload:\n  const handleUpload = async () => {\n    if (!selectedFiles.length) return;\n    setLoading(true);\n    try {\n      for (const file of selectedFiles) {\n        setUploadProgress(prev => ({\n          ...prev,\n          [file.name]: 0\n        }));\n\n        // Read PDF first to get page count\n        const arrayBuffer = await file.arrayBuffer();\n        const pdf = await getDocument({\n          data: arrayBuffer\n        }).promise;\n        const totalPages = pdf.numPages;\n        console.log('Total pages:', totalPages); // Debug log\n\n        // Upload to storage\n        const {\n          data: uploadData,\n          error: uploadError\n        } = await supabase.storage.from('pdfs').upload(`${Date.now()}_${file.name}`, file);\n        if (uploadError) throw uploadError;\n        const {\n          data: {\n            publicUrl\n          }\n        } = supabase.storage.from('pdfs').getPublicUrl(uploadData.path);\n\n        // Create document record with page count\n        const {\n          data: docData,\n          error: docError\n        } = await supabase.from('documents').insert({\n          filename: file.name,\n          file_url: publicUrl,\n          total_pages: totalPages\n        }).select().single();\n        if (docError) throw docError;\n\n        // Process PDF content\n        let fullText = [];\n        for (let i = 1; i <= totalPages; i++) {\n          const page = await pdf.getPage(i);\n          const textContent = await page.getTextContent();\n          const pageText = textContent.items.map(item => item.str).join(' ');\n          fullText.push({\n            text: pageText,\n            pageNumber: i\n          });\n          setUploadProgress(prev => ({\n            ...prev,\n            [file.name]: i / totalPages * 50\n          }));\n        }\n        console.log('Processed text:', fullText); // Debug log\n\n        // Process with edge function\n        const response = await fetch(`${process.env.REACT_APP_SUPABASE_URL}/functions/v1/process-pdf`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${process.env.REACT_APP_SUPABASE_ANON_KEY}`\n          },\n          body: JSON.stringify({\n            documentId: docData.id,\n            pages: fullText\n          })\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('Edge function response:', errorText); // Debug log\n          throw new Error(`Failed to process ${file.name}: ${errorText}`);\n        }\n        setUploadProgress(prev => ({\n          ...prev,\n          [file.name]: 100\n        }));\n      }\n\n      // Clear selected files and refresh document list\n      setSelectedFiles([]);\n      setUploadProgress({});\n      fetchDocuments();\n    } catch (error) {\n      console.error('Upload error:', error);\n      alert('Error uploading files: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Modify handleQuerySubmit to store chat history\n  const handleQuerySubmit = async e => {\n    e.preventDefault();\n    if (!query.trim() || !selectedDoc) return;\n    setLoading(true);\n    try {\n      const response = await fetch(`${process.env.REACT_APP_SUPABASE_URL}/functions/v1/process-query`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_SUPABASE_ANON_KEY}`\n        },\n        body: JSON.stringify({\n          query: query.trim(),\n          documentId: selectedDoc.id,\n          chatHistory: chatHistory\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error('Failed to process query: ' + errorText);\n      }\n      const result = await response.json();\n\n      // Create new chat entry\n      const newEntry = {\n        document_id: selectedDoc.id,\n        query: query.trim(),\n        response: result.answer,\n        context: result.context\n      };\n\n      // Store in database\n      const {\n        error: insertError\n      } = await supabase.from('chat_history').insert(newEntry);\n      if (insertError) throw insertError;\n\n      // Update local state\n      await fetchChatHistory(selectedDoc.id);\n      setQuery('');\n    } catch (error) {\n      console.error('Query error:', error);\n      alert(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upload-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"PDF Documents\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"upload-button\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              accept: \".pdf\",\n              multiple: true,\n              onChange: handleFileChange,\n              disabled: loading,\n              className: \"hidden\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(FaUpload, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 13\n            }, this), \" Choose Files\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"upload-submit\",\n            onClick: handleUpload,\n            disabled: !selectedFiles.length || loading,\n            children: [\"Upload \", selectedFiles.length ? `(${selectedFiles.length})` : '']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 9\n        }, this), Object.entries(uploadProgress).map(([filename, progress]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-progress\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"filename\",\n            children: filename\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"progress\",\n              style: {\n                width: `${progress}%`\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this)]\n        }, filename, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"documents-list\",\n        children: documents.map(doc => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `document-item ${(selectedDoc === null || selectedDoc === void 0 ? void 0 : selectedDoc.id) === doc.id ? 'selected' : ''}`,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"document-info\",\n            onClick: () => handleDocumentSelect(doc),\n            children: [/*#__PURE__*/_jsxDEV(FaFilePdf, {\n              className: \"doc-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"doc-name\",\n              children: doc.filename\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete-button\",\n            onClick: () => handleDelete(doc),\n            children: /*#__PURE__*/_jsxDEV(FaTrash, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this)]\n        }, doc.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: selectedDoc ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Chat about: \", selectedDoc.filename]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this), chatHistory.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"clear-chat-button\",\n            onClick: clearChat,\n            children: [/*#__PURE__*/_jsxDEV(FaTrash, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 17\n            }, this), \" Clear Chat\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select a document to start chatting\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-messages\",\n        children: isHistoryLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          children: \"Loading chat history...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this) : chatHistory.map((chat, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-entry\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-message\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"You:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 19\n              }, this), \" \", chat.query]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ai-message\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Gemini:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 429,\n                columnNumber: 19\n              }, this), \" \", chat.response]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 17\n            }, this), chat.context && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"context-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                children: \"Source Context:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"context-content\",\n                children: chat.context.map((ctx, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"context-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: ctx.content\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 437,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: \"page-link\",\n                    onClick: () => {\n                      console.log('Page number from context:', ctx.page_number); // Debug log\n                      openPdfPage(selectedDoc.file_url, ctx.page_number);\n                    },\n                    children: [\"Page \", ctx.page_number]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 438,\n                    columnNumber: 23\n                  }, this)]\n                }, idx, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 436,\n                  columnNumber: 21\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleQuerySubmit,\n        className: \"chat-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: query,\n          onChange: e => setQuery(e.target.value),\n          placeholder: selectedDoc ? \"Ask a question...\" : \"Select a document first\",\n          disabled: !selectedDoc || loading\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !selectedDoc || loading || !query.trim(),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 5\n    }, this), pdfViewerState.isOpen && /*#__PURE__*/_jsxDEV(PDFViewer, {\n      url: pdfViewerState.url,\n      pageNumber: pdfViewerState.pageNumber,\n      onClose: closePdfViewer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"QqCXz75sqxkA2qUvt5455Nk/B2A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","createClient","PDFViewer","FaUpload","FaFilePdf","FaTrash","pdfjsLib","getDocument","jsxDEV","_jsxDEV","GlobalWorkerOptions","workerSrc","supabase","process","env","REACT_APP_SUPABASE_URL","REACT_APP_SUPABASE_ANON_KEY","App","_s","selectedFiles","setSelectedFiles","documents","setDocuments","selectedDoc","setSelectedDoc","query","setQuery","chatHistory","setChatHistory","loading","setLoading","uploadProgress","setUploadProgress","isHistoryLoading","setIsHistoryLoading","fetchChatHistory","id","clearChat","error","from","delete","eq","console","alert","pdfViewerState","setPdfViewerState","isOpen","url","pageNumber","openPdfPage","data","signedUrlData","storage","createSignedUrl","split","pop","signedUrl","page","parseInt","log","viewerUrl","encodeURIComponent","window","open","closePdfViewer","documentId","select","order","ascending","handleDocumentSelect","doc","handleDelete","filename","file_url","storageError","remove","deleteError","fetchDocuments","handleFileChange","e","files","Array","target","validFiles","filter","file","isValidType","type","isValidSize","size","name","handleUpload","length","prev","arrayBuffer","pdf","promise","totalPages","numPages","uploadData","uploadError","upload","Date","now","publicUrl","getPublicUrl","path","docData","docError","insert","total_pages","single","fullText","i","getPage","textContent","getTextContent","pageText","items","map","item","str","join","push","text","response","fetch","method","headers","body","JSON","stringify","pages","ok","errorText","Error","message","handleQuerySubmit","preventDefault","trim","result","json","newEntry","document_id","answer","context","insertError","className","children","fileName","_jsxFileName","lineNumber","columnNumber","accept","multiple","onChange","disabled","onClick","Object","entries","progress","style","width","chat","index","ctx","idx","content","page_number","onSubmit","value","placeholder","onClose","_c","$RefreshReg$"],"sources":["/Users/ryantay/Desktop/Merctrans/pdf-reader/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\nimport React, { useState, useEffect } from 'react';\nimport { createClient } from '@supabase/supabase-js';\nimport './App.css';\nimport PDFViewer from './components/PDFViewer';\n// At the top of App.js, add this import:\nimport { FaUpload } from 'react-icons/fa';\nimport { FaFilePdf } from 'react-icons/fa';\nimport { FaTrash } from 'react-icons/fa';\n\nimport * as pdfjsLib from 'pdfjs-dist';\nimport { getDocument } from 'pdfjs-dist';\npdfjsLib.GlobalWorkerOptions.workerSrc = \"https://cdn.jsdelivr.net/npm/pdfjs-dist@4.9.155/build/pdf.worker.min.mjs\"; \n\n\nconst supabase = createClient(\n  process.env.REACT_APP_SUPABASE_URL,\n  process.env.REACT_APP_SUPABASE_ANON_KEY\n);\n\nfunction App() {\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [documents, setDocuments] = useState([]);\n  const [selectedDoc, setSelectedDoc] = useState(null);\n  const [query, setQuery] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState({});\n  const [isHistoryLoading, setIsHistoryLoading] = useState(false);\n\n  useEffect(() => {\n    if (selectedDoc) {\n      fetchChatHistory(selectedDoc.id);\n    }\n  }, [selectedDoc]);\n\n  const clearChat = async () => {\n    if (!selectedDoc) return;\n    \n    try {\n      // Delete from database\n      const { error } = await supabase\n        .from('chat_history')\n        .delete()\n        .eq('document_id', selectedDoc.id);\n  \n      if (error) throw error;\n  \n      // Clear local state\n      setChatHistory([]);\n    } catch (error) {\n      console.error('Error clearing chat:', error);\n      alert('Error clearing chat history');\n    }\n  };\n\n\n  const [pdfViewerState, setPdfViewerState] = useState({\n    isOpen: false,\n    url: null,\n    pageNumber: null\n  });\n  \n  // Update the openPdfPage function\n  const openPdfPage = async (url, pageNumber) => {\n    try {\n      const { data: signedUrlData, error } = await supabase\n        .storage\n        .from('pdfs')\n        .createSignedUrl(url.split('/').pop(), 3600);\n  \n      if (error) throw error;\n  \n      if (signedUrlData?.signedUrl) {\n        // Ensure pageNumber is a valid number\n        const page = parseInt(pageNumber, 10) || 1;\n        \n        // Log for debugging\n        console.log('Opening PDF:', {\n          url: signedUrlData.signedUrl,\n          pageNumber: page\n        });\n  \n        const viewerUrl = `/pdfjs/viewer.html?file=${encodeURIComponent(signedUrlData.signedUrl)}&page=${page}`;\n        window.open(viewerUrl, '_blank');\n      }\n    } catch (error) {\n      console.error('Error opening PDF:', error);\n      alert('Error opening PDF');\n    }\n  };\n\n  \n  // Add close function\n  const closePdfViewer = () => {\n    setPdfViewerState({\n      isOpen: false,\n      url: null,\n      pageNumber: null\n    });\n  };\n\n  // Add this function to fetch chat history\n  const fetchChatHistory = async (documentId) => {\n  setIsHistoryLoading(true);\n  try {\n    const { data, error } = await supabase\n      .from('chat_history')\n      .select('*')\n      .eq('document_id', documentId)\n      .order('created_at', { ascending: true });\n\n    if (error) throw error;\n    setChatHistory(data || []);\n  } catch (error) {\n    console.error('Error fetching chat history:', error);\n  } finally {\n    setIsHistoryLoading(false);\n  }\n};\n\n  const handleDocumentSelect = async (doc) => {\n  setSelectedDoc(doc);\n  await fetchChatHistory(doc.id);\n};\n\n  \nconst handleDelete = async (doc) => {\n  try {\n    // Delete from storage first\n    const filename = doc.file_url.split('/').pop();\n    const { error: storageError } = await supabase.storage\n      .from('pdfs')\n      .remove([filename]);\n\n    if (storageError) throw storageError;\n\n    // Delete document (will cascade delete chunks)\n    const { error: deleteError } = await supabase\n      .from('documents')\n      .delete()\n      .eq('id', doc.id);\n\n    if (deleteError) throw deleteError;\n\n    // Refresh documents list\n    fetchDocuments();\n  } catch (error) {\n    console.error('Delete error:', error);\n    alert('Error deleting document');\n  }\n};\n\n\n  useEffect(() => {\n    fetchDocuments();\n  }, []);\n\n  const fetchDocuments = async () => {\n    const { data } = await supabase.from('documents').select('*');\n    setDocuments(data || []);\n  };\n\n  const handleFileChange = (e) => {\n    const files = Array.from(e.target.files);\n    const validFiles = files.filter(file => {\n      const isValidType = file.type === 'application/pdf';\n      const isValidSize = file.size <= 10 * 1024 * 1024; // 10MB\n      if (!isValidType) alert(`${file.name} is not a PDF file`);\n      if (!isValidSize) alert(`${file.name} exceeds 10MB size limit`);\n      return isValidType && isValidSize;\n    });\n    setSelectedFiles(validFiles);\n  };\n\n  // In App.js, modify the fetch call in handleUpload:\n  const handleUpload = async () => {\n    if (!selectedFiles.length) return;\n  \n    setLoading(true);\n    try {\n      for (const file of selectedFiles) {\n        setUploadProgress(prev => ({ ...prev, [file.name]: 0 }));\n  \n        // Read PDF first to get page count\n        const arrayBuffer = await file.arrayBuffer();\n        const pdf = await getDocument({ data: arrayBuffer }).promise;\n        const totalPages = pdf.numPages;\n  \n        console.log('Total pages:', totalPages); // Debug log\n  \n        // Upload to storage\n        const { data: uploadData, error: uploadError } = await supabase.storage\n          .from('pdfs')\n          .upload(`${Date.now()}_${file.name}`, file);\n  \n        if (uploadError) throw uploadError;\n  \n        const { data: { publicUrl } } = supabase.storage\n          .from('pdfs')\n          .getPublicUrl(uploadData.path);\n  \n        // Create document record with page count\n        const { data: docData, error: docError } = await supabase\n          .from('documents')\n          .insert({\n            filename: file.name,\n            file_url: publicUrl,\n            total_pages: totalPages\n          })\n          .select()\n          .single();\n  \n        if (docError) throw docError;\n  \n        // Process PDF content\n        let fullText = [];\n        for (let i = 1; i <= totalPages; i++) {\n          const page = await pdf.getPage(i);\n          const textContent = await page.getTextContent();\n          const pageText = textContent.items.map(item => item.str).join(' ');\n          \n          fullText.push({\n            text: pageText,\n            pageNumber: i\n          });\n          \n          setUploadProgress(prev => ({\n            ...prev,\n            [file.name]: (i / totalPages) * 50\n          }));\n        }\n  \n        console.log('Processed text:', fullText); // Debug log\n  \n        // Process with edge function\n        const response = await fetch(\n          `${process.env.REACT_APP_SUPABASE_URL}/functions/v1/process-pdf`,\n          {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${process.env.REACT_APP_SUPABASE_ANON_KEY}`\n            },\n            body: JSON.stringify({\n              documentId: docData.id,\n              pages: fullText\n            })\n          }\n        );\n  \n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error('Edge function response:', errorText); // Debug log\n          throw new Error(`Failed to process ${file.name}: ${errorText}`);\n        }\n  \n        setUploadProgress(prev => ({ ...prev, [file.name]: 100 }));\n      }\n  \n      // Clear selected files and refresh document list\n      setSelectedFiles([]);\n      setUploadProgress({});\n      fetchDocuments();\n    } catch (error) {\n      console.error('Upload error:', error);\n      alert('Error uploading files: ' + error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  \n\n\n\n  // Modify handleQuerySubmit to store chat history\n  const handleQuerySubmit = async (e) => {\n  e.preventDefault();\n  if (!query.trim() || !selectedDoc) return;\n\n  setLoading(true);\n  try {\n    const response = await fetch(\n      `${process.env.REACT_APP_SUPABASE_URL}/functions/v1/process-query`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_SUPABASE_ANON_KEY}`\n        },\n        body: JSON.stringify({\n          query: query.trim(),\n          documentId: selectedDoc.id,\n          chatHistory: chatHistory\n        })\n      }\n    );\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error('Failed to process query: ' + errorText);\n    }\n\n    const result = await response.json();\n    \n    // Create new chat entry\n    const newEntry = {\n      document_id: selectedDoc.id,\n      query: query.trim(),\n      response: result.answer,\n      context: result.context\n    };\n\n    // Store in database\n    const { error: insertError } = await supabase\n      .from('chat_history')\n      .insert(newEntry);\n\n    if (insertError) throw insertError;\n\n    // Update local state\n    await fetchChatHistory(selectedDoc.id);\n    setQuery('');\n  } catch (error) {\n    console.error('Query error:', error);\n    alert(error.message);\n  } finally {\n    setLoading(false);\n  }\n};\n\n  \n\nreturn (\n  <div className=\"app-container\">\n    <div className=\"sidebar\">\n      <div className=\"upload-section\">\n        <h2>PDF Documents</h2>\n        <div className=\"upload-controls\">\n          <label className=\"upload-button\">\n            <input\n              type=\"file\"\n              accept=\".pdf\"\n              multiple\n              onChange={handleFileChange}\n              disabled={loading}\n              className=\"hidden\"\n            />\n            <FaUpload /> Choose Files\n          </label>\n          <button \n            className=\"upload-submit\"\n            onClick={handleUpload}\n            disabled={!selectedFiles.length || loading}\n          >\n            Upload {selectedFiles.length ? `(${selectedFiles.length})` : ''}\n          </button>\n        </div>\n        {Object.entries(uploadProgress).map(([filename, progress]) => (\n          <div key={filename} className=\"upload-progress\">\n            <span className=\"filename\">{filename}</span>\n            <div className=\"progress-bar\">\n              <div \n                className=\"progress\" \n                style={{ width: `${progress}%` }}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"documents-list\">\n        {documents.map(doc => (\n          <div\n            key={doc.id}\n            className={`document-item ${selectedDoc?.id === doc.id ? 'selected' : ''}`}\n          >\n            <div \n              className=\"document-info\"\n              onClick={() => handleDocumentSelect(doc)}\n            >\n              <FaFilePdf className=\"doc-icon\" />\n              <span className=\"doc-name\">{doc.filename}</span>\n            </div>\n            <button \n              className=\"delete-button\"\n              onClick={() => handleDelete(doc)}\n            >\n              <FaTrash />\n            </button>\n          </div>\n        ))}\n      </div>\n    </div>\n\n    <div className=\"chat-container\">\n      <div className=\"chat-header\">\n        {selectedDoc ? (\n          <div className=\"chat-header-content\">\n            <h2>Chat about: {selectedDoc.filename}</h2>\n            {chatHistory.length > 0 && (\n              <button \n                className=\"clear-chat-button\"\n                onClick={clearChat}\n              >\n                <FaTrash /> Clear Chat\n              </button>\n            )}\n          </div>\n        ) : (\n          <h2>Select a document to start chatting</h2>\n        )}\n      </div>\n\n      <div className=\"chat-messages\">\n        {isHistoryLoading ? (\n          <div className=\"loading\">Loading chat history...</div>\n        ) : (\n          chatHistory.map((chat, index) => (\n            <div key={index} className=\"chat-entry\">\n              <div className=\"user-message\">\n                <div className=\"message-content\">\n                  <strong>You:</strong> {chat.query}\n                </div>\n              </div>\n              <div className=\"ai-message\">\n                <div className=\"message-content\">\n                  <strong>Gemini:</strong> {chat.response}\n                </div>\n                {chat.context && (\n                  <div className=\"context-info\">\n                    <small>Source Context:</small>\n                    <div className=\"context-content\">\n                    {chat.context.map((ctx, idx) => (\n                    <div key={idx} className=\"context-item\">\n                      <p>{ctx.content}</p>\n                      <button\n                        className=\"page-link\"\n                        onClick={() => {\n                          console.log('Page number from context:', ctx.page_number); // Debug log\n                          openPdfPage(selectedDoc.file_url, ctx.page_number);\n                        }}\n                      >\n                        Page {ctx.page_number}\n                      </button>\n                    </div>\n                  ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n\n      <form onSubmit={handleQuerySubmit} className=\"chat-input\">\n        <input\n          type=\"text\"\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          placeholder={selectedDoc ? \"Ask a question...\" : \"Select a document first\"}\n          disabled={!selectedDoc || loading}\n        />\n        <button \n          type=\"submit\" \n          disabled={!selectedDoc || loading || !query.trim()}\n        >\n          Send\n        </button>\n      </form>\n    </div>\n\n    {pdfViewerState.isOpen && (\n  <PDFViewer \n    url={pdfViewerState.url}\n    pageNumber={pdfViewerState.pageNumber}\n    onClose={closePdfViewer}\n  />\n)}\n\n  </div>\n);\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}